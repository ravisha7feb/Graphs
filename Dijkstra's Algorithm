#include<bits/stdc++.h>
#include <limits.h>
#include <stdio.h>
using namespace std;

int minDistance(int dist[], bool sptSet[], int V)
{
	int min = INT_MAX, min_index;

	for (int v = 0; v < V; v++)
		if (sptSet[v] == false && dist[v] <= min)
			min = dist[v], min_index = v;

	return min_index;
}

// A utility function to print the constructed distance array
void printSolution(int dist[], int V)
{
	printf("Vertex \t\t Distance from Source\n");
	for (int i = 0; i < V; i++)
		printf("%d \t\t %d\n", i, dist[i]);
}


int dijkstra(int V, vector< vector<int> > graph, int src, int t)
{
	int dist[V]; 
	bool sptSet[V]; 

	for (int i = 0; i < V; i++)
		dist[i] = INT_MAX, sptSet[i] = false;

	dist[src] = 0;
	for(int i = 0; i < V; i++){
		cout << dist[i] << " ";
	}
	
	cout << endl;
	for (int count = 0; count < V - 1; count++) {
		int u = minDistance(dist, sptSet, V);

		sptSet[u] = true;

		for (int v = 0; v < V; v++)

			if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
				dist[v] = dist[u] + graph[u][v];
	}

	printSolution(dist, V);
	
	return dist[t] ;
}

int main()
{
	int n; //number of nodes
	int s, m, v1, v2, w, t; //m->number of edges
	cin >> n >> m >> s >> t;
	vector< vector<int> > graph(n, vector<int>(n, 0)) ;
	for(int i = 0; i < m; i++){
	    cin >> v1 >> v2 >> w;
	    graph[v1][v2] = w;
	    graph[v2][v1] = w;
	}
	cout << dijkstra(n, graph, s, t);
	return 0;
}
